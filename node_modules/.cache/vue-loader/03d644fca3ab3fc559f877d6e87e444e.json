{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/paymtAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/paymtAdd.vue","mtime":1652338665849},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUdXRvcmlhbERhdGFTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL1R1dG9yaWFsRGF0YVNlcnZpY2UiOwppbXBvcnQgU2VhdERhdGFTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL1NlYXRQcmVwYXJlU2VydmljZSI7CmltcG9ydCBQbXREYXRhU2VydmljZSBmcm9tICIuLi9zZXJ2aWNlcy9QbXRTZXJ2aWNlIjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICJhZGQtdHV0b3JpYWwiLAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewoKICAgICAgICAgICAgZTE6IDEsCiAgICAgICAgICAgIHN0ZXBzOiAyLAogICAgICAgICAgICBzdGVwc19uYW1lOiBbJ+mgkOWFiOWhq+WvqycsICfloLHliLDnubPosrsnLCAn5a6J5o6S6Z225L2NJywgJ+i/veWVj+e6jOaZgicsICflhaXluLPnmbvoqJgnLCAn5L2c5buiJ10sCgogICAgICAgICAgICAvLyAtIC0gLSAtIC0gLSAtICAKCiAgICAgICAgICAgIHN0X3NubzogIiIsCgogICAgICAgICAgICBwbXQ6IHsKICAgICAgICAgICAgICAgIC8vIOmhp+WuouWnk+WQjQogICAgICAgICAgICAgICAgbmFtZTogIiIsCiAgICAgICAgICAgICAgICAvLyDnj77ph5HmlLblhaUKICAgICAgICAgICAgICAgIGluY29tZTogMCwKCiAgICAgICAgICAgICAgICAvLyDmtojosrvmrbfnqIsKICAgICAgICAgICAgICAgIHBseVNUQVRVOiAiIiwKCiAgICAgICAgICAgICAgICAvLyDnj77ph5HmlLblhaUKICAgICAgICAgICAgICAgIHBheUNhc2g6IDAsCiAgICAgICAgICAgICAgICBwYXlMaW5QYXk6IDAsCiAgICAgICAgICAgICAgICBwYXlDVENhcmQ6IDAsCiAgICAgICAgICAgICAgICBwYXlHb3ZUaWs6IDAsCiAgICAgICAgICAgICAgICAvLyDnmbvlhaXml6XmnJ8KICAgICAgICAgICAgICAgIGNyZWF0RGF0ZTogJycsCiAgICAgICAgICAgICAgICAvLyDnmbvlhaXmmYLplpMKICAgICAgICAgICAgICAgIC8vIGNyZWF0VGltZTpuZXcgRGF0ZSgpLAogICAgICAgICAgICAgICAgLy8g5L2N572uCiAgICAgICAgICAgICAgICBzaG9vdFBvc19kdGw6IFtdLAoKICAgICAgICAgICAgICAgIC8vIOesrDHmrKHnmbvlhaXkvY3nva4KICAgICAgICAgICAgICAgIGR0bF9mc3Q6IFtdLAogICAgICAgICAgICAgICAgLy8g56ysMuasoeeZu+WFpQogICAgICAgICAgICAgICAgZHRsX3NlYzogW10sCgogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc3Q6IHsKICAgICAgICAgICAgICAgIHBvczogIuWMlyIsCiAgICAgICAgICAgICAgICBzbm86ICI0IiwKICAgICAgICAgICAgICAgIHNub19pZHg6ICIwMSIsCiAgICAgICAgICAgICAgICB0bXBfaWR4OiAiIiwKCiAgICAgICAgICAgICAgICBsZWZ0X3RpbWU6ICIxMjowMCIsCiAgICAgICAgICAgICAgICBhbXQ6ICIiLAogICAgICAgICAgICAgICAgcGF5bXQ6ICIiLAogICAgICAgICAgICAgICAgbWVtbzogIiIsCiAgICAgICAgICAgICAgICBzbHRlZDogW10sCiAgICAgICAgICAgICAgICBzdGF0dTogW10sCiAgICAgICAgICAgICAgICBwdWJsaXNoZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1zZ2c6ICc5OTknLAoKICAgICAgICAgICAgdHV0b3JpYWw6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiAiIiwKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICAgICAgICAgIGlkeDogW10sCiAgICAgICAgICAgICAgICBwdWJsaXNoZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1Ym1pdHRlZDogZmFsc2UKCiAgICAgICAgfTsKICAgIH0sCiAgICBtZXRob2RzOiB7CgogICAgICAgIHNhdmVUKCkgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnR1dG9yaWFsLnRpdGxlLAogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMudHV0b3JpYWwuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICBwdWJsaXNoZWQ6IGZhbHNlCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLmNyZWF0ZShkYXRhKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGVkIG5ldyBpdGVtIHN1Y2Nlc3NmdWxseSEiKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdHRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBzYXZlUygpIHsKICAgICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgICAgICBwb3M6IHRoaXMuc3QucG9zLAogICAgICAgICAgICAgICAgc25vOiB0aGlzLnN0LnNubywKICAgICAgICAgICAgICAgIHNub19pZHg6IHRoaXMuc3Quc25vX2lkeCwKICAgICAgICAgICAgICAgIHRtcF9pZHg6IHRoaXMuc3QudG1wX2lkeCwKCiAgICAgICAgICAgICAgICBsZWZ0X3RpbWU6IHRoaXMuc3QubGVmdF90aW1lLAoKCiAgICAgICAgICAgICAgICBtZW1vOiB0aGlzLnN0Lm1lbW8sCgogICAgICAgICAgICAgICAgYW10OiB0aGlzLnN0LmFtdCwKICAgICAgICAgICAgICAgIHBheW10OiB0aGlzLnN0LnBheW10LAogICAgICAgICAgICAgICAgc2x0ZWQ6IHRoaXMuc3Quc2x0ZWQsCiAgICAgICAgICAgICAgICBzdGF0dTogdGhpcy5zdC5zdGF0dQoKCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0ZWQgbmV3IGl0ZW0gc3VjY2Vzc2Z1bGx5ISIpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBzYXZlUG10KCkgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucG10Lm5hbWUsCiAgICAgICAgICAgICAgICBpbmNvbWU6IHBhcnNlSW50KHRoaXMucG10LmluY29tZSksCiAgICAgICAgICAgICAgICBwYXlDVENhcmQ6IHBhcnNlSW50KHRoaXMucG10LnBheUNUQ2FyZCksCiAgICAgICAgICAgICAgICBwYXlDYXNoOiBwYXJzZUludCh0aGlzLnBtdC5wYXlDYXNoKSwKICAgICAgICAgICAgICAgIHBheUxpblBheTogcGFyc2VJbnQodGhpcy5wbXQucGF5TGluUGF5KSwKICAgICAgICAgICAgICAgIHBheUdvdlRpazogcGFyc2VJbnQodGhpcy5wbXQucGF5R292VGlrKSwKCiAgICAgICAgICAgICAgICBzaG9vdFBvc19kdGw6IHRoaXMucG10LnNob290UG9zX2R0bCwKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIFBtdERhdGFTZXJ2aWNlLmNyZWF0ZShkYXRhKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGVkIG5ldyBpdGVtIHN1Y2Nlc3NmdWxseSEiKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1zZ2cucHVzaChkYXRhLmtleSkKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBzYXZlUG10MigpIHsKCiAgICAgICAgICAgIGxldCByYW5kb21JZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApICsgJ0EnICsgRGF0ZS5ub3coKQoKICAgICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnBtdC5uYW1lLAogICAgICAgICAgICAgICAgaW5jb21lOiBwYXJzZUludCh0aGlzLnBtdC5pbmNvbWUpLAogICAgICAgICAgICAgICAgcGF5Q1RDYXJkOiBwYXJzZUludCh0aGlzLnBtdC5wYXlDVENhcmQpLAogICAgICAgICAgICAgICAgcGF5Q2FzaDogcGFyc2VJbnQodGhpcy5wbXQucGF5Q2FzaCksCiAgICAgICAgICAgICAgICBwYXlMaW5QYXk6IHBhcnNlSW50KHRoaXMucG10LnBheUxpblBheSksCiAgICAgICAgICAgICAgICBwYXlHb3ZUaWs6IHBhcnNlSW50KHRoaXMucG10LnBheUdvdlRpayksCgogICAgICAgICAgICAgICAgc2hvb3RQb3NfZHRsOiB0aGlzLnBtdC5zaG9vdFBvc19kdGwsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBQbXREYXRhU2VydmljZS5zZXR1dUlEKHJhbmRvbUlkLnRvU3RyaW5nKCksIGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tc2dnID0gIkNyZWNjZXNzZnVsbHkhIjsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBzYXZlU19ieV9pZHgoX3Nub19pZHgpIHsKICAgICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgICAgICBwb3M6IHRoaXMuc3QucG9zLAogICAgICAgICAgICAgICAgc25vOiB0aGlzLnN0Ll9zbm8sCiAgICAgICAgICAgICAgICBzbm9faWR4OiBfc25vX2lkeCwKCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0ZWQgbmV3IGl0ZW0gc3VjY2Vzc2Z1bGx5ISIpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIG5ld0RhdGFhKF9zbm8sIF9zbm9faWR4KSB7CgoKICAgICAgICAgICAgdmFyIGR0YSA9IHsKICAgICAgICAgICAgICAgIC8vIC0gLSAtIC0gCiAgICAgICAgICAgICAgICBwb3M6ICfljZcnLAogICAgICAgICAgICAgICAgc25vOiBfc25vLnRvU3RyaW5nKCksCiAgICAgICAgICAgICAgICBzbm9faWR4OiAnMCcgKyBfc25vX2lkeC50b1N0cmluZygpLAogICAgICAgICAgICAgICAgdG1wX2lkeDogdGhpcy5zdC50bXBfaWR4LAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiB0aGlzLnN0LmxlZnRfdGltZSwKICAgICAgICAgICAgICAgIG1lbW86IHRoaXMuc3QubWVtbywKCiAgICAgICAgICAgICAgICBhbXQ6IHRoaXMuc3QuYW10LAogICAgICAgICAgICAgICAgcGF5bXQ6IHRoaXMuc3QucGF5bXQsCgogICAgICAgICAgICAgICAgc2x0ZWQ6IHRoaXMuc3Quc2x0ZWQsCiAgICAgICAgICAgICAgICBzdGF0dTogdGhpcy5zdC5zdGF0dQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcmV0dXJuIGR0YQogICAgICAgIH0sCgogICAgICAgIGF1dG9JbnN0YWxsQnlmb3JMb29wMSgpIHsKCiAgICAgICAgICAgIGZvciAobGV0IGlpID0gMTsgaWkgPD0gMTE7IGlpKyspIHsKCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMubmV3RGF0YWEoaWksIGkpOwoKICAgICAgICAgICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGVkIG5ldyBpdGVtIHN1Y2Nlc3NmdWxseSEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnN1Ym1pdHRlZCA9IHRydWU7CgoKICAgICAgICB9LAoKICAgICAgICBhdXRvSW5zdGFsbEJ5Zm9yTG9vcDIoKSB7CgogICAgICAgICAgICBmb3IgKGxldCBpaSA9IDEyOyBpaSA8PSAxODsgaWkrKykgewoKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5uZXdEYXRhYShpaSwgaSk7CgogICAgICAgICAgICAgICAgICAgIFNlYXREYXRhU2VydmljZS5jcmVhdGUoZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0ZWQgbmV3IGl0ZW0gc3VjY2Vzc2Z1bGx5ISIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTsKCgogICAgICAgIH0sCgogICAgICAgIGF1dG9CdWQoKSB7CgogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHBvczogdGhpcy5zdC5wb3MsCiAgICAgICAgICAgICAgICBzbm86IHRoaXMuc3Quc25vLAogICAgICAgICAgICAgICAgc25vX2lkeDogJzAxJywKICAgICAgICAgICAgICAgIHRtcF9pZHg6IHRoaXMuc3QudG1wX2lkeCwKCiAgICAgICAgICAgICAgICBsZWZ0X3RpbWU6IHRoaXMuc3QubGVmdF90aW1lLAoKCiAgICAgICAgICAgICAgICBtZW1vOiB0aGlzLnN0Lm1lbW8sCgogICAgICAgICAgICAgICAgc2x0ZWQ6IHRoaXMuc3Quc2x0ZWQsCiAgICAgICAgICAgICAgICBzdGF0dTogdGhpcy5zdC5zdGF0dQoKCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0ZWQgbmV3IGl0ZW0gc3VjY2Vzc2Z1bGx5ISIpOwogICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBkYXRhMiA9IHsKICAgICAgICAgICAgICAgIHBvczogdGhpcy5zdC5wb3MsCiAgICAgICAgICAgICAgICBzbm86IHRoaXMuc3Quc25vLAogICAgICAgICAgICAgICAgc25vX2lkeDogJzAyJywKICAgICAgICAgICAgICAgIHRtcF9pZHg6IHRoaXMuc3QudG1wX2lkeCwKCiAgICAgICAgICAgICAgICBsZWZ0X3RpbWU6IHRoaXMuc3QubGVmdF90aW1lLAoKCiAgICAgICAgICAgICAgICBtZW1vOiB0aGlzLnN0Lm1lbW8sCgogICAgICAgICAgICAgICAgc2x0ZWQ6IHRoaXMuc3Quc2x0ZWQsCiAgICAgICAgICAgICAgICBzdGF0dTogdGhpcy5zdC5zdGF0dQoKCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEyKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGVkIG5ldyBpdGVtIHN1Y2Nlc3NmdWxseSEiKTsKICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnN1Ym1pdHRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgZGF0YTMgPSB7CiAgICAgICAgICAgICAgICBwb3M6IHRoaXMuc3QucG9zLAogICAgICAgICAgICAgICAgc25vOiB0aGlzLnN0LnNubywKICAgICAgICAgICAgICAgIHNub19pZHg6ICcwMycsCiAgICAgICAgICAgICAgICB0bXBfaWR4OiB0aGlzLnN0LnRtcF9pZHgsCgogICAgICAgICAgICAgICAgbGVmdF90aW1lOiB0aGlzLnN0LmxlZnRfdGltZSwKCgogICAgICAgICAgICAgICAgbWVtbzogdGhpcy5zdC5tZW1vLAoKICAgICAgICAgICAgICAgIHNsdGVkOiB0aGlzLnN0LnNsdGVkLAogICAgICAgICAgICAgICAgc3RhdHU6IHRoaXMuc3Quc3RhdHUKCgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgU2VhdERhdGFTZXJ2aWNlLmNyZWF0ZShkYXRhMykKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ3JlYXRlZCBuZXcgaXRlbSBzdWNjZXNzZnVsbHkhIik7CiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zdWJtaXR0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0pOwoKCiAgICAgICAgfSwKCgoKCiAgICAgICAgbmV3VHV0b3JpYWwoKSB7CiAgICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMudHV0b3JpYWwgPSB7CiAgICAgICAgICAgICAgICB0aXRsZTogIiIsCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIiIsCiAgICAgICAgICAgICAgICBwdWJsaXNoZWQ6IGZhbHNlCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKCiAgICAgICAgbmV3U3QoKSB7CiAgICAgICAgICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuc3QgPSB7CiAgICAgICAgICAgICAgICAvLyBwb3M6IiIsCiAgICAgICAgICAgICAgICAvLyBzbm86ICIiLAogICAgICAgICAgICAgICAgLy8gc25vX2lkeDogIiIsCiAgICAgICAgICAgICAgICAvLyB0bXBfaWR4OiAiIiwKICAgICAgICAgICAgICAgIC8vIGxlZnRfdGltZToiIiwKICAgICAgICAgICAgICAgIC8vIG1lbW86IiIsCiAgICAgICAgICAgICAgICAvLyBzbHRlZDogW10sCiAgICAgICAgICAgICAgICAvLyBzdGF0dTpbXSwKICAgICAgICAgICAgICAgIC8vIHB1Ymxpc2hlZDogZmFsc2UKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKCiAgICB9LAogICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgZmV0Y2goImh0dHBzOi8vd3d3LnJhZ2ljLmNvbS94aWh1L2Zvcm1zLzEzNz9hcGkmQVBJS2V5PWNIQjJXVVJSZUdOSEx6TmFVMUp5WjJoMFlsVndiVzVETTFKbU4yVnpSRFY1WlV0UU5WbHJjWEp0WldWaFlqWm9VSGw2VW1WV2Jta3ZSa0k1Wmk4MmN3PT0mbGlzdGluZyIpCiAgICAgICAgICAgIC50aGVuKHIgPT4gci5qc29uKCkpCiAgICAgICAgICAgIC50aGVuKGpzb24gPT4gewogICAgICAgICAgICAgICAgdGhpcy5qc29uID0ganNvbjsKICAgICAgICAgICAgICAgIGxldCBfanNvbiA9IFtdOwogICAgICAgICAgICAgICAgdmFyIGZlZWQgPSB7IGNyZWF0ZWRfYXQ6ICIyMDE3LTAzLTE0VDAxOjAwOjMyWiIsIGVudHJ5X2lkOiAzMzM1OCwgZmllbGQxOiAiNCIsIGZpZWxkMjogIjQiLCBmaWVsZDM6ICIwIiB9OwogICAgICAgICAgICAgICAgdmFyIGRhdGFhID0gW107CiAgICAgICAgICAgICAgICB2YXIgZGEgPSB7CiAgICAgICAgICAgICAgICAgICAgImNyZWF0ZWRfYXQiOiBmZWVkLmNyZWF0ZWRfYXQsCiAgICAgICAgICAgICAgICAgICAgImVudHJ5X2lkIjogZmVlZC5lbnRyeV9pZCwKICAgICAgICAgICAgICAgICAgICAiZmllbGQxIjogZmVlZC5maWVsZDEsCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZGF0YWEucHVzaChkYSk7CgogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmpzb24ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBfanNvbi5wdXNoKHRoaXMuanNvbltpXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuanNvbl9NZGYgPSB0aGlzLmpzb25bMl0u5Lit5YiG6aGeOwogICAgICAgICAgICAgICAgdGhpcy5qc0wgPSAiMjk5OTk5IiArIHRoaXMuZGF0YWE7CiAgICAgICAgICAgIH0pOwoKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIFR1dG9yaWFsRGF0YVNlcnZpY2UuZ2V0QWxsKCkub24oInZhbHVlIiwgdGhpcy5vbkRhdGFDaGFuZ2UpOwogICAgICAgIFNlYXREYXRhU2VydmljZS5nZXRBbGwoKS5vbigidmFsdWUiLCB0aGlzLm9uRGF0YUNoYW5nZSk7CgoKCiAgICB9LAp9Owo="},null]}