{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/DragDrop.vue?vue&type=template&id=cf09461a&","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/DragDrop.vue","mtime":1654321526691},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}