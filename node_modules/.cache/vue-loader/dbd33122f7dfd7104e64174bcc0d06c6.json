{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/bdadd5_List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/bdadd5_List.vue","mtime":1656514955082},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBUdXRvcmlhbERldGFpbHMgZnJvbSAiLi9ia2FkZDVfTWRmIjsKaW1wb3J0IFR1dG9yaWFsRGF0YVNlcnZpY2UgZnJvbSAiLi4vc2VydmljZXMvU2VhdFByZXBhcmVTZXJ2aWNlIjsKCmltcG9ydCBTZWF0RGF0YVNlcnZpY2UgICAgIGZyb20gIi4uL3NlcnZpY2VzL1NlYXRQcmVwYXJlU2VydmljZSI7CmltcG9ydCBIaXN0b3J5RGF0YVNlcnZpY2UgIGZyb20gIi4uL3NlcnZpY2VzL0hpc3RvcnlEYXRhU2VydmljZSI7CmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7CgoKaW1wb3J0IFBtdERhdGFTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL1BtdFNlcnZpY2UiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZScKaW1wb3J0IEpzb25DU1YgZnJvbSAndnVlLWpzb24tY3N2JwpWdWUuY29tcG9uZW50KCdkb3dubG9hZENzdicsIEpzb25DU1YpCgpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAidHV0b3JpYWxzLWxpc3QiLAogICAgY29tcG9uZW50czogeyBUdXRvcmlhbERldGFpbHMgfSwKCgogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAvLyAtIC0gLSAtIC0gCiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiBEYXRlLm5vdygpLAogICAgICAgICAgICBjVDogIiIsCiAgICAgICAgICAgIGN1VDogIiIsCiAgICAgICAgICAgIHBseVNUQVRVOiAiIiwKICAgICAgICAgICAgYW1lbml0aWVzOiBbXSwKICAgICAgICAgICAgLy8gLSAtIC0gLSAtIAogICAgICAgICAgICBzd2l0Y2gxOiB0cnVlLAogICAgICAgICAgICBzd2l0Y2gyOiBmYWxzZSwKICAgICAgICAgICAgY29sb3I6IFsncmVkJywncmVkJywgJ3JlZCcsICd5ZWxsb3cnLCAneWVsbG93JywgJ2dyZWVuJywgJ2dyZWVuJywgJ2dyYXknLCAnZ3JheScsICdibHVlJywgJ2JsdWUnLCAncmVkJywgJ3JlZCcsICdibHVlJywgJ2JsdWUnLAogICAgICAgICAgICAgICAgJ2dyZWVuJywgJ2dyZWVuJywgJ3JlZCcsICdyZWQnLCAnZ3JlZW4nLCAnZ3JlZW4nLCAncmVkJywgJ3JlZCcsICd5ZWxsb3cnLCAneWVsbG93JywgJ2JsdWUnLCAnYmx1ZScsICdncmVlbicsICdncmVlbicsCiAgICAgICAgICAgICAgICAncmVkJywgJ3JlZCcsICd5ZWxsb3cnLCAneWVsbG93JywgJ2dyZWVuJywgJ2dyZWVuJywgJ3JlZCcsICdyZWQnLCAneWVsbG93JywgJ3llbGxvdycKICAgICAgICAgICAgXSwKCgogICAgICAgICAgICBleDExOiBbJ3JlZCddLAogICAgICAgICAgICBleDogZmFsc2UsCgoKICAgICAgICAgICAgZGlhbG9nOiBmYWxzZSwKICAgICAgICAgICAgdGFiOiAiIiwKICAgICAgICAgICAgY2tieDogIiIsCiAgICAgICAgICAgIGNvcHlSaWdodF9OOiBmYWxzZSwKICAgICAgICAgICAgY29weVJpZ2h0X1Q6IGZhbHNlLAogICAgICAgICAgICBjb3B5UmlnaHRfTTogZmFsc2UsCgogICAgICAgICAgICAvLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAKICAgICAgICAgICAgZGV2X1Rvb0xfc2hvdzogZmFsc2UsCiAgICAgICAgICAgIERldl9Ub29sXzA6IGZhbHNlLAogICAgICAgICAgICBEZXZfVG9vbF8xOiBmYWxzZSwKICAgICAgICAgICAgRGV2X1Rvb2xfMjogZmFsc2UsCiAgICAgICAgICAgIERldl9Ub29sXzM6IGZhbHNlLAoKICAgICAgICAgICAgYmNoX2xlZnRfdGltZTogIiIsCiAgICAgICAgICAgIGJjaF90bXBfaWR4OiAiIiwKICAgICAgICAgICAgYmNoX21lbW86ICIiLAoKICAgICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICAgIHR1dG9yaWFsczogW10sCiAgICAgICAgICAgIGN1cnJlbnRUdXRvcmlhbDogbnVsbCwKICAgICAgICAgICAgY3VycmVudEluZGV4OiAtMSwKCiAgICAgICAgICAgIC8vIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0KICAgICAgICAgICAgdXNlX0JLaW5nR3A6IGZhbHNlLAoKICAgICAgICAgICAgLy8gcGx5X3N0YXR1X0xpc3Q6WyfpppbmrKEnLCflhY3orJvnv5InLCfkv53nlZnluK0nLCfnuowu5pyq57mz6LK7Jywn57qMMC41Jywn57qMMS4wJ10sCiAgICAgICAgICAgIC8vIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gIAogICAgICAgICAgICBQbXRMaXN0czogW10sCgogICAgICAgICAgICBwOiBbJ2tleScsICduYW1lJywgJ3Bob25lJywgJ3BseV9hbXQnLCAncGx5ZCddLAoKICAgICAgICAgICAgbGFiZWxzOiB7CiAgICAgICAgICAgICAgICBrZXk6ICfmtYHmsLTnt6jomZ8nLAogICAgICAgICAgICAgICAgcGhvbmU6ICfmiYvmqZ8nLAoKICAgICAgICAgICAgICAgIGJ1aWxkX2RhdGU6ICfml6XmnJ8nLAogICAgICAgICAgICAgICAgcGx5X2FtdDogJ+aUtuWFpemHkemhje+8iO+8i++8iScsCiAgICAgICAgICAgICAgICBtYl9pZDogJ+acg+WToee3qOiZnycsCiAgICAgICAgICAgICAgICBtYl9uYW1lOiAn5a6i5oi2JywKICAgICAgICAgICAgICAgIHBkX0lEOiAn5ZWG5ZOB57eo6JmfJywKICAgICAgICAgICAgICAgIHBkX25hbWU6ICfnlKLlk4HlkI3nqLEnLAoKICAgICAgICAgICAgICAgIHBheUNhc2g6ICfnj77ph5EnLAogICAgICAgICAgICAgICAgcGF5TGluUGF5OiAnTGluZXBheScsCiAgICAgICAgICAgICAgICBwYXlDVENhcmQ6ICfliLfljaHmqZ8nLAogICAgICAgICAgICAgICAgcGF5TmV0QmFuazogJ+e2sui3ryjnt5rkuIopJywKICAgICAgICAgICAgICAgIHBheUdvdlRpazogJ+WLlea7i+WNtycsCgogICAgICAgICAgICAgICAgbWVtbzogJ+WCmeiouycsCiAgICAgICAgICAgICAgICBibHNfQ05UOiAn5beu6aGNJywKICAgICAgICAgICAgICAgIGJsc19DTlRfcmVzb246ICflt67poY3ljp/lm6AnLAoKICAgICAgICAgICAgICAgIGFDTlRfc0M6ICflsI/liIbpoZ4nLAogICAgICAgICAgICAgICAgcGNzX3ByaWNlOiAn5Zau5YO5JywKICAgICAgICAgICAgICAgIGFDTlRfbmFtZTogJ+acg+ioiOenkeebruWQjeeosScsCiAgICAgICAgICAgICAgICBhQ05UX2NfSUQ6ICfmnIPoqIjnp5Hnm67ku6PomZ8nLAogICAgICAgICAgICAgICAgYUNOVF9jX25hbWU6ICfnp5Hnm67lkI3nqLEnLAoKICAgICAgICAgICAgICAgIGJsZF9uYW1lOiAn5bu656uL6ICFJywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy8gZmllbGRzOiBbICduYW1lJywncGx5X2FtdCcsJ2tleScsJ3Bob25lJywncGx5ZCddLAogICAgICAgICAgICBmaWVsZHM6IFsnbmFtZScsICdwaG9uZScsICdwbHlfYW10JywgJ2tleScsICdidWlsZF9kYXRlJywgJ3BheUNhc2gnLCAncGF5TmV0QmFuaycsICdwYXlDVENhcmQnLCAncGF5R292VGlrJywgJ3BheUxpblBheScsICdtZW1vJywgJ2Jsc19DTlQnLCAnYmxzX0NOVF9yZXNvbicsICdhQ05UX3NDJywgJ3Bjc19wcmljZScsICdhQ05UX25hbWUnLCAnYUNOVF9jX0lEJywgJ2FDTlRfY19uYW1lJ10sCiAgICAgICAgICAgIC8vIOS/ruaUuV/nsKHljJbniYjmnKwgIAogICAgICAgICAgICAvLyDml6XmnJ8nLCfljp/lm6AnLCfmlLblhaXph5HpoY3vvIjvvIvvvIknLCfmnIPlk6Hnt6jomZ8nLCflrqLmiLYnLCfllYblk4Hnt6jomZ8nLCfnlKLlk4HlkI3nqLEnLCfpirfllK7mlbjph48nLCflsI/oqIgnLCfnj77ph5EnLCfntrLot68o57ea5LiKKScsJ+WIt+WNoeapnycsJ+WMr+asvicsJ+WLlea7i+WNtycsJ0xpbmVwYXknLCflgpnoqLsnLCflt67poY0nLCflt67poY3ljp/lm6AnLCfku5jmrL7mlrnlvI8nLCflsI/liIbpoZ4nLCfllq7lg7knLCfmnIPoqIjnp5Hnm67lkI3nqLEnLCfmnIPoqIjnp5Hnm67ku6PomZ8nLCfnp5Hnm67lkI3nqLEnLCflu7rnq4vogIUnLCfkv67mlLnmmYLplpMnLCAKICAgICAgICAgICAgLy8g5Y6f54mI5pysCiAgICAgICAgICAgIC8vIOaXpeacnycsJ+WOn+WboCcsJ+aXpeacn+ePreWIpScsJ+aUtuWFpemHkemhje+8iO+8i++8iScsJ+acg+WToee3qOiZnycsJ+WuouaIticsJ+WVhuWTgee3qOiZnycsJ+eUouWTgeWQjeeosScsJ+mKt+WUruaVuOmHjycsJ+Wwj+ioiCcsJ+ePvumHkScsJ+e2sui3ryjnt5rkuIopJywn5Yi35Y2h5qmfJywn5Yyv5qy+Jywn5YuV5ruL5Y23JywnTGluZXBheScsJ+mBi+WLleWNtycsJ+eGiuWlveWNtycsJ+i/quWNoeWEguWNtycsJ+WPsOeBo3BheScsJ+eZvOelqOiZn+eivCcsJ+WCmeiouycsJ+W3rumhjScsJ+W3rumhjeWOn+WboCcsJ+S7mOasvuaWueW8jycsJ+Wwj+WIhumhnicsJ+WWruWDuScsJ+aUtuWFpeeZu+mMhCcsJ+acg+ioiOenkeebruWQjeeosScsJ+acg+ioiOenkeebruS7o+iZnycsJ+enkeebruWQjeeosScsJ+WtuOWToeWgseWQjeiqsueoi+S7o+iZnycsJ+W7uueri+iAhScsJ+S/ruaUueaZgumWkycsJzXlgI3ljbcnCiAgICAgICAgICAgIC8vIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gCiAgICAgICAgICAgIC8vIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gIC0gLSAtIC0gCiAgICAgICAgICAgIGZpbGVOYW1lOiAnVVVVJywKICAgICAgICAgICAgYWJzb2x1dGU6IHRydWUsCiAgICAgICAgICAgIG92ZXJsYXk6IGZhbHNlLAogICAgICAgICAgICB0b0hlcmU6IiIsCiAgICAgICAgICAgIAogICAgICAgIH07CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGNoZ1BvcyhlKXsKICAgICAgICAgICAgdGhpcy5vdmVybGF5ID0gIXRoaXMub3ZlcmxheQoKICAgICAgICAgICAgLy8gYWxlcnQoZS5rZXkpOwogICAgICAgIH0sCgogICAgICAgIGNoYW5nUG9zKGtleSl7ICAKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsgIAogICAgICAgICAgICAgICAgdG1wX2lkeDogdGhpcy5jdXJyZW50VHV0b3JpYWwudG1wX2lkeCwKICAgICAgICAgICAgICAgIGxlZnRfdGltZTogdGhpcy5jdXJyZW50VHV0b3JpYWwubGVmdF90aW1lLAogICAgICAgICAgICAgICAgbWVtbzogdGhpcy5jdXJyZW50VHV0b3JpYWwubWVtbywKICAgICAgICAgICAgICAgIHBseV9zdGF0dTp0aGlzLmN1cnJlbnRUdXRvcmlhbC5wbHlfc3RhdHUsCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IE9MRCA9IHsgCiAgICAgICAgICAgICAgICB0bXBfaWR4OiIiLAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiIiLAogICAgICAgICAgICAgICAgbWVtbzoiIiwKICAgICAgICAgICAgICAgIHBseV9zdGF0dToiIiwgCiAgICAgICAgICAgIH07IAoKICAgICAgICAgICAgVHV0b3JpYWxEYXRhU2VydmljZS51cGRhdGUoa2V5LCBkYXRhKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4geyAKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgVHV0b3JpYWxEYXRhU2VydmljZS51cGRhdGUodGhpcy5jdXJyZW50VHV0b3JpYWwua2V5LCBPTEQpCiAgICAgICAgICAgICAudGhlbigoKSA9PiB7IAogICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkv67mlLnlroznlaIhJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfpnbbkvY3lt7LpgLLooYwg6Kq/5pW0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxMjAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5ID0gZmFsc2U7ICAgIAogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7IAogICAgICAgICAgICB0aGlzLnVwbGRfSGlzdG9yeV9tZGYodGhpcy5jdXJyZW50VHV0b3JpYWwpOyAgICAgIAogICAgICAgIH0sCgogICAgICAgIHJlbW92ZVNUKCkgewogICAgICAgICAgICB0aGlzLmJjaF9tZW1vID0gIiI7CiAgICAgICAgICAgIHRoaXMuYmNoX2xlZnRfdGltZSA9ICIiOwogICAgICAgICAgICB0aGlzLmNvcHlSaWdodF9NID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuY29weVJpZ2h0X1QgPSBmYWxzZTsKICAgICAgICB9LAoKICAgICAgICBsZWZ0X01kZihkZXRhbCwgZSkgewogICAgICAgICAgICB2YXIgc3RyQXJ5ID0gZS5sZWZ0X3RpbWUuc3BsaXQoIjoiKTsKCiAgICAgICAgICAgIGlmIChkZXRhbCA9PSAxKSB7CgogICAgICAgICAgICAgICAgaWYgKGRldGFsID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoc3RyQXJ5WzFdKSA9PSAzMCkgewogICAgICAgICAgICAgICAgICAgICAgICBlLmxlZnRfdGltZSA9IHBhcnNlSW50KHN0ckFyeVswXSkgKyAxICsgIjowMCI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdHJBcnlbMV0pID49IDMwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUubGVmdF90aW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHN0ckFyeVswXSkgKyAxICsgIjoiICsgKHBhcnNlSW50KHN0ckFyeVsxXSkgLSAzMCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdHJBcnlbMV0pIDwgMzApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5sZWZ0X3RpbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyQXJ5WzBdICsgIjoiICsgKHBhcnNlSW50KHN0ckFyeVsxXSkgKyAzMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgbGVmdF90aW1lOiBlLmxlZnRfdGltZSwKICAgICAgICAgICAgICAgICAgICBwbHlfc3RhdHU6ICfnuowu5bey57mzJywKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgVHV0b3JpYWxEYXRhU2VydmljZS51cGRhdGUoZS5rZXksIGRhdGEpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLAogICAgICAgICAgICAgICAgICAgIGljb246ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S/ruaUueWujOeVoiEnLAogICAgICAgICAgICAgICAgICAgIHRleHQ6ICfoq4voqJjlvpcu56K66KqN5pS26LK7JywKICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgdGltZXI6IDEyMDAKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAvLyBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgLy8gICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsCiAgICAgICAgICAgICAgICAvLyAgICAgdGV4dDogIuWuouS6uumcgOimgee6jOaZgiAzMOWIhumQmCDll47vvJ8iLAogICAgICAgICAgICAgICAgLy8gICAgIGljb246ICd3YXJuaW5nJywKICAgICAgICAgICAgICAgIC8vICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgLy8gICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLAogICAgICAgICAgICAgICAgLy8gICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAnI2QzMycsCiAgICAgICAgICAgICAgICAvLyAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfmlrDlop4s57qM5pmC5pa55qGIICEnLAogICAgICAgICAgICAgICAgLy8gICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtoghJwogICAgICAgICAgICAgICAgLy8gICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgLy8gICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgdmFyIHN0ckFyeSA9IGUubGVmdF90aW1lLnNwbGl0KCI6Iik7CiAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGRldGFsID09IDEpIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWYgKHBhcnNlSW50KHN0ckFyeVsxXSkgPT0gMzApIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGUubGVmdF90aW1lID0gcGFyc2VJbnQoc3RyQXJ5WzBdKSArIDEgKyAiOjAwIiA7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGVsc2UgaWYgKHBhcnNlSW50KHN0ckFyeVsxXSkgPj0gMzApIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGUubGVmdF90aW1lID0KICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBwYXJzZUludChzdHJBcnlbMF0pICsgMSArICI6IiArIChwYXJzZUludChzdHJBcnlbMV0pIC0gMzApOwogICAgICAgICAgICAgICAgLy8gICAgICAgICB9IAogICAgICAgICAgICAgICAgLy8gICAgICAgICBlbHNlIGlmIChwYXJzZUludChzdHJBcnlbMV0pIDwgMzApIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGUubGVmdF90aW1lID0KICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBzdHJBcnlbMF0gKyAiOiIgKyAocGFyc2VJbnQoc3RyQXJ5WzFdKSArIDMwKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gICAgIH0gIAoKICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICAgICAgLy8gICAgICAgICBsZWZ0X3RpbWU6IGUubGVmdF90aW1lLAogICAgICAgICAgICAgICAgLy8gICAgICAgICBwbHlfc3RhdHU6ICfnuowu5bey57mzJywKICAgICAgICAgICAgICAgIC8vICAgICB9OwoKICAgICAgICAgICAgICAgIC8vICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOizh+aWme+8jOS4iuWCs+aIkOWKnyEiOwogICAgICAgICAgICAgICAgLy8gICAgICAgICB9KQogICAgICAgICAgICAgICAgLy8gICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgLy8gICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIFN3YWwuZmlyZSgKICAgICAgICAgICAgICAgIC8vICAgICAgICAgeyAKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0aXRsZTogJ+S/ruaUueWujOeVoiEnLAogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgdGV4dDon6KuL6KiY5b6XLueiuuiqjeaUtuiyuycsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0aW1lcjogMTIwMAogICAgICAgICAgICAgICAgLy8gICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICkKICAgICAgICAgICAgICAgIC8vICAgICB9CiAgICAgICAgICAgICAgICAvLyAgICAgfSkgCgogICAgICAgICAgICB9IGVsc2UgaWYgKGRldGFsID09IDIpIHsKICAgICAgICAgICAgICAgIGlmIChkZXRhbCA9PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgZS5sZWZ0X3RpbWUgPQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzdHJBcnlbMF0pICsgMSArICI6IiArIHN0ckFyeVsxXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICAgICAgICAgIGxlZnRfdGltZTogZS5sZWZ0X3RpbWUsCiAgICAgICAgICAgICAgICAgICAgcGx5X3N0YXR1OiAn57qMLuW3sue5sycsCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIFR1dG9yaWFsRGF0YVNlcnZpY2UudXBkYXRlKGUua2V5LCBkYXRhKQogICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOizh+aWme+8jOS4iuWCs+aIkOWKnyEiOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkv67mlLnlroznlaIhJywKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+iri+iomOW+ly7norroqo3mlLbosrsnLAogICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyOiAxMjAwCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICkKCgogICAgICAgICAgICAgICAgLy8gU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIC8vICAgICB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLAogICAgICAgICAgICAgICAgLy8gICAgIHRleHQ6ICLlrqLkurrpnIDopoHnuozmmYIgMSDlsI/mmYIg5ZeO77yfIiwKICAgICAgICAgICAgICAgIC8vICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgICAgICAvLyAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIC8vICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjMzA4NWQ2JywKICAgICAgICAgICAgICAgIC8vICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAogICAgICAgICAgICAgICAgLy8gICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn5paw5aKeLOe6jOaZguaWueahiCAhJywKICAgICAgICAgICAgICAgIC8vICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIIScKICAgICAgICAgICAgICAgIC8vICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHZhciBzdHJBcnkgPSBlLmxlZnRfdGltZS5zcGxpdCgiOiIpOwogICAgICAgICAgICAgICAgLy8gICAgIGlmIChkZXRhbCA9PSAyKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGUubGVmdF90aW1lID0KICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHBhcnNlSW50KHN0ckFyeVswXSkgKyAxICsgIjoiICsgc3RyQXJ5WzFdOwogICAgICAgICAgICAgICAgLy8gICAgIH0KCiAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGVmdF90aW1lOiBlLmxlZnRfdGltZSwKICAgICAgICAgICAgICAgIC8vICAgICAgICAgcGx5X3N0YXR1OiAn57qMLuW3sue5sycsCiAgICAgICAgICAgICAgICAvLyAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyAgICAgVHV0b3JpYWxEYXRhU2VydmljZS51cGRhdGUoZS5rZXksIGRhdGEpCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICLmm7TmlrDos4fmlpnvvIzkuIrlgrPmiJDlip8hIjsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC8vICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy8gICAgICAgICBTd2FsLmZpcmUoIAogICAgICAgICAgICAgICAgLy8gICAgICAgICB7IAogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGljb246ICdzdWNjZXNzJywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRpdGxlOiAn5L+u5pS55a6M55WiIScsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0ZXh0Oifoq4voqJjlvpcu56K66KqN5pS26LK7JywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRpbWVyOiAxMjAwCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyAgICAgICAgICkKICAgICAgICAgICAgICAgIC8vICAgICB9CiAgICAgICAgICAgICAgICAvLyAgICAgfSkgCgogICAgICAgICAgICB9CgoKCgoKCiAgICAgICAgfSwKCiAgICAgICAgdXBkYXRlVHV0b3JpYWwoZSkgewogICAgICAgICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICAgICAgLy8gc25vX2lkOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5zbm9faWR4LAogICAgICAgICAgICAgICAgLy8gcG9zOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5wb3MsCiAgICAgICAgICAgICAgICAvLyBzbm86IHRoaXMuY3VycmVudFR1dG9yaWFsLnNubywKICAgICAgICAgICAgICAgIC8vIHNub19pZHg6IHRoaXMuY3VycmVudFR1dG9yaWFsLnNub19pZHgsCgogICAgICAgICAgICAgICAgdG1wX2lkeDogZS50bXBfaWR4LAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiBlLmxlZnRfdGltZSwKICAgICAgICAgICAgICAgIG1lbW86IGUubWVtbywKCiAgICAgICAgICAgICAgICAvLyBhbXQ6IHRoaXMuY3VycmVudFR1dG9yaWFsLmFtdCwKICAgICAgICAgICAgICAgIC8vIHBheW10OiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5wYXltdCwKICAgICAgICAgICAgICAgIHBseV9zdGF0dTogZS5wbHlfc3RhdHUsCgogICAgICAgICAgICAgICAgLy8gcGx5X3R5cGU6IHRoaXMuY3VycmVudFR1dG9yaWFsLnBseV90eXBlLAogICAgICAgICAgICB9OwoKICAgICAgICAgICAgVHV0b3JpYWxEYXRhU2VydmljZS51cGRhdGUoZS5rZXksIGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOizh+aWme+8jOS4iuWCs+aIkOWKnyEiOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICB1cGxkdG1wX2lkeChlKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICB0bXBfaWR4OiBlLnRtcF9pZHgsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsgIAogICAgICAgICAgICB0aGlzLnVwbGRfSGlzdG9yeShlKTsKICAgICAgICB9LAoKICAgICAgICB1cGxkbGVmdF90aW1lKGUpIHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgICAgIGxlZnRfdGltZTogZS5sZWZ0X3RpbWUsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy51cGxkX0hpc3RvcnkoZSk7CiAgICAgICAgfSwKCiAgICAgICAgdXBsZHBsYXlHcChlKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICBtZW1vOiBlLm1lbW8sCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHVwbGRTdGF0dShlKSB7CgogICAgICAgICAgICBpZiAoZS5wbHlfc3RhdHUgPT0gIiIgfCBlLnBseV9zdGF0dSA9PSBudWxsIHwgZS5wbHlfc3RhdHUgPT0gJycpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdCA9IHsKICAgICAgICAgICAgICAgICAgICBwbHlfc3RhdHU6ICIiLAogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0KQogICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOizh+aWme+8jOS4iuWCs+aIkOWKnyEiOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICAgICAgICAgIHBseV9zdGF0dTogZS5wbHlfc3RhdHUsCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIFR1dG9yaWFsRGF0YVNlcnZpY2UudXBkYXRlKGUua2V5LCBkYXRhKQogICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOizh+aWme+8jOS4iuWCs+aIkOWKnyEiOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnVwbGRfSGlzdG9yeShlKTsKCiAgICAgICAgfSwKCiAgICAgICAgdXBsZF9IaXN0b3J5KGUpIHsKCgogICAgICAgICAgICBpZiggZS50bXBfaWR4ICE9JycgJiYgZS5sZWZ0X3RpbWUgIT0gJycgJiYgZS5wbHlfc3RhdHUgIT0nJyApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICAvLyDns7vntbEu6Kit5a6a6LOH5paZCiAgICAgICAgICAgICAgICBwb3M6IGUucG9zLAogICAgICAgICAgICAgICAgc25vOiBlLnNubywKICAgICAgICAgICAgICAgIHNub19pZHg6IGUuc25vX2lkeCwKICAgICAgICAgICAgICAgIC8vIOS4u+imgeiuiuWLleizh+aWmQogICAgICAgICAgICAgICAgdG1wX2lkeDogZS50bXBfaWR4LCAKICAgICAgICAgICAgICAgIGxlZnRfdGltZTogZS5sZWZ0X3RpbWUsIAogICAgICAgICAgICAgICAgcGx5X3N0YXR1OmUucGx5X3N0YXR1LCAKICAgICAgICAgICAgICAgIG1lbW86ZS5tZW1vLCAgIAogICAgICAgICAgICAgICAgY3JhdFRpbWU6dGhpcy5kYXlqcyhEYXRlLm5vdygpKS50b0lTT1N0cmluZygpLAogICAgICAgICAgICB9OwoKICAgICAgICAgICAgSGlzdG9yeURhdGFTZXJ2aWNlLmNyZWF0ZShkYXRhKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIC8vICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLAogICAgICAgICAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ+izh+aWmeaWsOWinuaIkOWKnycsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRleHQ6IGUubGVmdF90aW1lKyAn6KuLIOWcqOmAsuihjCDnorroqo3kuIDkuIvllrLvvZ4nLAogICAgICAgICAgICAgICAgLy8gICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gfSkKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHBvc2l0aW9uOiAndG9wLWVuZCcsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGljb246ICd3YXJuaW5nJywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGl0bGU6ICfmraPlnKjorITlr6vmrbflj7Los4fmlpknLAogICAgICAgICAgICAgICAgLy8gICAgICAgICB0ZXh0OiAn6KuLIOWcqOmAsuihjCDnorroqo3kuIDkuIvllrLvvZ4nLAogICAgICAgICAgICAgICAgLy8gICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRpbWVyOiAxMjAwCiAgICAgICAgICAgICAgICAvLyAgICAgfSkgCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICB9LAogICAgICAgIHVwbGRfSGlzdG9yeV9tZGYoZSkgewoKCiAgICAgICAgICAgIGlmKCBlLnRtcF9pZHggIT0nJyAmJiBlLmxlZnRfdGltZSAhPSAnJyAmJiBlLnBseV9zdGF0dSAhPScnICkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgICAgIC8vIOezu+e1sS7oqK3lrpros4fmlpkKICAgICAgICAgICAgICAgIHBvczogZS5wb3MsCiAgICAgICAgICAgICAgICBzbm86IGUuc25vLAogICAgICAgICAgICAgICAgc25vX2lkeDogZS5zbm9faWR4LAogICAgICAgICAgICAgICAgLy8g5Li76KaB6K6K5YuV6LOH5paZCiAgICAgICAgICAgICAgICB0bXBfaWR4OiBlLnRtcF9pZHgsIAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiBlLmxlZnRfdGltZSwgCiAgICAgICAgICAgICAgICBwbHlfc3RhdHU6J+aPm+mdtuS9jScsIAogICAgICAgICAgICAgICAgbWVtbzplLm1lbW8sICAgCiAgICAgICAgICAgICAgICBjcmF0VGltZTp0aGlzLmRheWpzKERhdGUubm93KCkpLnRvSVNPU3RyaW5nKCksCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBIaXN0b3J5RGF0YVNlcnZpY2UuY3JlYXRlKGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgLy8gICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgLy8gICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLAogICAgICAgICAgICAgICAgLy8gICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRpdGxlOiAn6LOH5paZ5paw5aKe5oiQ5YqfJywKICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGV4dDogZS5sZWZ0X3RpbWUrICfoq4sg5Zyo6YCy6KGMIOeiuuiqjeS4gOS4i+WWsu+9nicsCiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyB9KQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7IAogICAgICAgICAgICB9CgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfSwKCiAgICAgICAgdXBsZF9DbGFlcihlKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICBtZW1vOiAiIiwKICAgICAgICAgICAgICAgIGxlZnRfdGltZTogIiIsCiAgICAgICAgICAgICAgICB0bXBfaWR4OiAiIiwKICAgICAgICAgICAgICAgIHBseV9zdGF0dTogIiIsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBUdXRvcmlhbERhdGFTZXJ2aWNlLnVwZGF0ZShlLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGV4dGVuZFBheUNoayhlKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+e6jOaZgiDnubPosrvnorroqo0gJywKICAgICAgICAgICAgICAgIHRleHQ6ICLmlZnnt7Tlt7LoqaLllY/vvIzoq4vmq4Pmqq/ljZTliqnmlLbosrsiLAogICAgICAgICAgICAgICAgaWNvbjogJ3F1ZXN0aW9uJywKICAgICAgICAgICAgICAgIHNob3dEZW55QnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn57qMICAwLjUg5bCP5pmCJywKICAgICAgICAgICAgICAgIGRlbnlCdXR0b25UZXh0OiBg57qMIDEg5bCP5pmCYCwKICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtoggIScKICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgICAgICAvKiBSZWFkIG1vcmUgYWJvdXQgaXNDb25maXJtZWQsIGlzRGVuaWVkIGJlbG93ICovCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7CgogICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdF9NZGYoMSwgZSkKICAgICAgICAgICAgICAgICAgICAvLyBTd2FsLmZpcmUoJ1NhdmVkIScsICcnLCAnc3VjY2VzcycpCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5pc0RlbmllZCkgewoKICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRfTWRmKDIsIGUpCiAgICAgICAgICAgICAgICAgICAgLy8gU3dhbC5maXJlKCdDaGFuZ2VzIGFyZSBub3Qgc2F2ZWQnLCAnJywgJ2luZm8nKQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuaXNEaXNtaXNzZWQpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICBwbHlfc3RhdHU6ICfmiJHopoHnuozmmYInLAogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIFR1dG9yaWFsRGF0YVNlcnZpY2UudXBkYXRlKGUua2V5LCBkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw6LOH5paZ77yM5LiK5YKz5oiQ5YqfISI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcC1lbmQnLAogICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5pyq5a6M5oiQ57mz6LK7IScsCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfoq4sg5Zyo6YCy6KGMIOeiuuiqjeS4gOS4i+WWsu+9nicsCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGltZXI6IDEyMDAKICAgICAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9LAoKCgogICAgICAgIE1kZkxmVGltZV8wNShlKSB7CgogICAgICAgICAgICAvLyB2YXIgYSA9IGRheWpzLmR1cmF0aW9uKGUubGVmdF90aW1lLCAnaGg6bW0nKTsKICAgICAgICAgICAgLy8gdmFyIGIgPSBkYXlqcy5kdXJhdGlvbigzMCwgJ2hoOm1tJyk7CgogICAgICAgICAgICAvLyBjb25zdCBkYXRhID0geyAKICAgICAgICAgICAgLy8gICAgICBsZWZ0X3RpbWU6YS5hZGQoYikubWludXRlcygpLCAKICAgICAgICAgICAgLy8gfTsKCiAgICAgICAgICAgIC8vIFR1dG9yaWFsRGF0YVNlcnZpY2UudXBkYXRlKGUua2V5LCBkYXRhKQogICAgICAgICAgICAvLyAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAvLyAgICAgICAgIHRoaXMubWVzc2FnZSA9ICLmm7TmlrDos4fmlpnvvIzkuIrlgrPmiJDlip8hIjsKICAgICAgICAgICAgLy8gICAgIH0pCiAgICAgICAgICAgIC8vICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgLy8gICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIE1kZkxmVGltZV8xMChlKSB7CiAgICAgICAgICAgIC8vICB2YXIgYSA9IGRheWpzLmR1cmF0aW9uKGUubGVmdF90aW1lLCAnaGg6bW0nKTsKICAgICAgICAgICAgLy8gdmFyIGIgPSBkYXlqcy5kdXJhdGlvbigxLCAnaGgnKTsKCiAgICAgICAgICAgIC8vIGNvbnN0IGRhdGEgPSB7IAogICAgICAgICAgICAvLyAgICAgIGxlZnRfdGltZTphLmFkZChiKS5ob3VycygpLCAKICAgICAgICAgICAgLy8gfTsKCiAgICAgICAgICAgIC8vIFR1dG9yaWFsRGF0YVNlcnZpY2UudXBkYXRlKGUua2V5LCBkYXRhKQogICAgICAgICAgICAvLyAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAvLyAgICAgICAgIHRoaXMubWVzc2FnZSA9ICLmm7TmlrDos4fmlpnvvIzkuIrlgrPmiJDlip8hIjsKICAgICAgICAgICAgLy8gICAgIH0pCiAgICAgICAgICAgIC8vICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgLy8gICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHBtdF9vbkRhdGFDaGFuZ2UoaXRlbXMpIHsKCiAgICAgICAgICAgIGxldCBfdGFuc0NBVE0gPSBbXTsKICAgICAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gewogICAgICAgICAgICAgICAgbGV0IGtleSA9IGl0ZW0ua2V5OwogICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBpdGVtLnZhbCgpOwogICAgICAgICAgICAgICAgX3RhbnNDQVRNLnB1c2goewoKICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSwKCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lLAogICAgICAgICAgICAgICAgICAgIHBob25lOiBkYXRhLnBob25lLAogICAgICAgICAgICAgICAgICAgIC8vLyDpgJnpgorpnIDopoHlho3lvoDkuIvoo73kvZwgLi4uIOe0r+S6huWFiOedoe+8jOWGjeWuieaOkuWQpwoKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHRoaXMucG10TGlzdHMgPSBfdGFuc0NBVE07CiAgICAgICAgfSwKCgoKICAgICAgICBvbkRhdGFDaGFuZ2UoaXRlbXMpIHsKCiAgICAgICAgICAgIGxldCBfdHV0b3JpYWxzID0gW107CiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHsKICAgICAgICAgICAgICAgIGxldCBrZXkgPSBpdGVtLmtleTsKICAgICAgICAgICAgICAgIGxldCBkYXRhID0gaXRlbS52YWwoKTsKICAgICAgICAgICAgICAgIF90dXRvcmlhbHMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICAgICAgICAgICAgcG9zOiBkYXRhLnBvcywKICAgICAgICAgICAgICAgICAgICBzbm86IGRhdGEuc25vLAogICAgICAgICAgICAgICAgICAgIHNub19pZHg6IGRhdGEuc25vX2lkeCwKICAgICAgICAgICAgICAgICAgICBzbm9faWQ6IGRhdGEuc25vX2lkLAoKICAgICAgICAgICAgICAgICAgICB0bXBfaWR4OiBkYXRhLnRtcF9pZHgsCiAgICAgICAgICAgICAgICAgICAgbGVmdF90aW1lOiBkYXRhLmxlZnRfdGltZSwKICAgICAgICAgICAgICAgICAgICBtZW1vOiBkYXRhLm1lbW8sCiAgICAgICAgICAgICAgICAgICAgcGx5X3N0YXR1OiBkYXRhLnBseV9zdGF0dSwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHRoaXMudHV0b3JpYWxzID0gX3R1dG9yaWFsczsKICAgICAgICB9LAoKCgogICAgICAgIHJlZnJlc2hMaXN0KCkgewogICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gLTE7CiAgICAgICAgfSwKCiAgICAgICAgc2V0QWN0aXZlVHV0b3JpYWwodHV0b3JpYWwsIGluZGV4KSB7CgogICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbCA9IHR1dG9yaWFsOwogICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IGluZGV4OwoKICAgICAgICAgICAgaWYgKHRoaXMuY29weVJpZ2h0X04gIT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFR1dG9yaWFsLnRtcF9pZHggPSB0aGlzLmJjaF90bXBfaWR4OwogICAgICAgICAgICAgICAgdGhpcy5iY2hfdXBkdGEoKTsKICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICLopIfoo73mm7TmlrAg5oiQ5YqfISI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLmNvcHlSaWdodF9UICE9IGZhbHNlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbC5sZWZ0X3RpbWUgPSB0aGlzLmJjaF9sZWZ0X3RpbWU7CiAgICAgICAgICAgICAgICB0aGlzLmJjaF91cGR0YSgpOwogICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuikh+ijveabtOaWsCDmiJDlip8hIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMuY29weVJpZ2h0X00gIT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFR1dG9yaWFsLm1lbW8gPSB0aGlzLmJjaF9tZW1vOwogICAgICAgICAgICAgICAgdGhpcy5iY2hfdXBkdGEoKTsKICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9ICLopIfoo73mm7TmlrAg5oiQ5YqfISI7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBiY2hfdXBkdGEoKSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7CiAgICAgICAgICAgICAgICB0bXBfaWR4OiB0aGlzLmN1cnJlbnRUdXRvcmlhbC50bXBfaWR4LAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5sZWZ0X3RpbWUsCiAgICAgICAgICAgICAgICBtZW1vOiB0aGlzLmN1cnJlbnRUdXRvcmlhbC5tZW1vLAogICAgICAgICAgICB9OwoKICAgICAgICAgICAgU2VhdERhdGFTZXJ2aWNlLnVwZGF0ZSh0aGlzLmN1cnJlbnRUdXRvcmlhbC5rZXksIGRhdGEpCiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gIuabtOaWsOaIkOWKnyEiOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKCgogICAgICAgIC8vIHJlU2V0X2JjaF9OKCl7IGlmKHRoaXMuY29weVJpZ2h0X04gPT0gZmFsc2UpIHsgdGhpcy5iY2hfbGVmdF90aW1lID0gIiI7IH0gIH0sCiAgICAgICAgLy8gcmVTZXRfYmNoX1QoKXsgaWYodGhpcy5jb3B5UmlnaHRfVCA9PSBmYWxzZSkgeyB0aGlzLmJjaF90bXBfaWR4ID0gIiIgIDsgfSAgfSwKCiAgICAgICAgLAoKCiAgICAgICAgcmVTZXRfcG9zXzAoKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLAogICAgICAgICAgICAgICAgdGV4dDogIua6luWCmea4heeQhuizh+aWmSEiLAogICAgICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLAogICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLAogICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjZDMzJywKICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn6aas5LiKLCDpgLLooYzmuIXnkIYgIScsCiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIIScKICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8PSAxMDA7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVUdXRvcmlhbCh0aGlzLnR1dG9yaWFsc1tpbmRleF0sIGluZGV4KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZVNldE9uZSh0aGlzLnR1dG9yaWFsc1tpbmRleF0sIGluZGV4KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ+a4hemZpOWujOeVoiEnLAogICAgICAgICAgICAgICAgICAgICAgICAn55uu5YmNLicsCiAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJwogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9LAoKICAgICAgICByZVNldF9wb3NfMSgpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsCiAgICAgICAgICAgICAgICB0ZXh0OiAi5rqW5YKZ5riF55CG6LOH5paZISIsCiAgICAgICAgICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzMwODVkNicsCiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfppqzkuIosIOmAsuihjOa4heeQhiAhJywKICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtoghJwogICAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDw9IDMwOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlVHV0b3JpYWwodGhpcy50dXRvcmlhbHNbaW5kZXhdLCBpbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVTZXRPbmUodGhpcy50dXRvcmlhbHNbaW5kZXhdLCBpbmRleCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoCiAgICAgICAgICAgICAgICAgICAgICAgICfmuIXpmaTlroznlaIhJywKICAgICAgICAgICAgICAgICAgICAgICAgJ+ebruWJjS4nLAogICAgICAgICAgICAgICAgICAgICAgICAnc3VjY2VzcycKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCgogICAgICAgIH0sCgogICAgICAgIHJlU2V0X3Bvc18yKCkgewoKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsCiAgICAgICAgICAgICAgICB0ZXh0OiAi5rqW5YKZ5riF55CG6LOH5paZISIsCiAgICAgICAgICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzMwODVkNicsCiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfppqzkuIosIOmAsuihjOa4heeQhiAhJywKICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtoghJwogICAgICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDMxOyBpbmRleCA8PSAxMDA7IGluZGV4KyspIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlVHV0b3JpYWwodGhpcy50dXRvcmlhbHNbaW5kZXhdLCBpbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVTZXRPbmUodGhpcy50dXRvcmlhbHNbaW5kZXhdLCBpbmRleCk7CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKAogICAgICAgICAgICAgICAgICAgICAgICAn5riF6Zmk5a6M55WiIScsCiAgICAgICAgICAgICAgICAgICAgICAgICfnm67liY0uJywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQoKICAgICAgICB9LAoKICAgICAgICByZVNldE9uZSh0dXRvcmlhbCwgaW5kZXgpIHsKCiAgICAgICAgICAgIHRoaXMuY3VycmVudFR1dG9yaWFsID0gdHV0b3JpYWw7CiAgICAgICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gaW5kZXg7CgogICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbC50bXBfaWR4ID0gIiI7CiAgICAgICAgICAgIHRoaXMuY3VycmVudFR1dG9yaWFsLmxlZnRfdGltZSA9ICIiOwogICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbC5tZW1vID0gIiI7CiAgICAgICAgICAgIHRoaXMuY3VycmVudFR1dG9yaWFsLnBseV9zdGF0dSA9ICIiOwogICAgICAgICAgICB0aGlzLmN1cnJlbnRUdXRvcmlhbC5wbHlfdHlwZSA9ICIiOwogICAgICAgICAgICAvLyB0aGlzLmN1cnJlbnRUdXRvcmlhbC5wbXRfTGlzdCA9ICIiOwoKICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHRtcF9pZHg6ICIiLAogICAgICAgICAgICAgICAgbGVmdF90aW1lOiAiIiwKICAgICAgICAgICAgICAgIG1lbW86ICIiLAoKICAgICAgICAgICAgICAgIHBseV90eXBlOiAiIiwKICAgICAgICAgICAgICAgIHBseV9zdGF0dTogIiIsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBTZWF0RGF0YVNlcnZpY2UudXBkYXRlKHRoaXMuY3VycmVudFR1dG9yaWFsLmtleSwgZGF0YSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAi5pu05paw5oiQ5YqfISI7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVBbGxUdXRvcmlhbHMoKSB7CiAgICAgICAgICAgIFNlYXREYXRhU2VydmljZS5kZWxldGVBbGwoKQogICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaExpc3QoKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgoKICAgICAgICBDaGtUaW1lMmdldENvbG9yKGxlZnRfdGltZSkgewoKICAgICAgICAgICAgbGV0IG5vd19IID0gcGFyc2VJbnQodGhpcy5kYXlqcyh0aGlzLmNUKS5mb3JtYXQoIkhIIikpCiAgICAgICAgICAgIGxldCBub3dfTSA9IHBhcnNlSW50KHRoaXMuZGF5anModGhpcy5jVCkuZm9ybWF0KCJtbSIpKQogICAgICAgICAgICBsZXQgY29sQXJ5ID0gWycjZDNkY2U2JywgJyNFOTFFNjMnLCAnIzIxOTZGMyddCgogICAgICAgICAgICB2YXIgc3RyQXJ5ID0gbGVmdF90aW1lLnNwbGl0KCc6JykKCiAgICAgICAgICAgIGxldCBib29raW5nX0ggPSBwYXJzZUludChzdHJBcnlbMF0pCiAgICAgICAgICAgIGxldCBib29raW5nX00gPSBwYXJzZUludChzdHJBcnlbMV0pCgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKGxlZnRfdGltZSA9PSAiIikgeyByZXR1cm4gY29sQXJ5WzBdIH0gZWxzZSBpZiAobm93X0ggPiBib29raW5nX0gpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobm93X00gPj0gYm9va2luZ19NKSB7IHJldHVybiBjb2xBcnlbMV0gfSBlbHNlIGlmIChub3dfTSA8IGJvb2tpbmdfTSAmJiBub3dfSCA+PSBib29raW5nX0gpIHsgcmV0dXJuIGNvbEFyeVsxXSB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vd19IID09IGJvb2tpbmdfSCkgewogICAgICAgICAgICAgICAgICAgIGlmIChub3dfTSA+PSBib29raW5nX00pIHsgcmV0dXJuIGNvbEFyeVsxXSB9IGVsc2UgaWYgKG5vd19NIDwgYm9va2luZ19NKSB7IHJldHVybiBjb2xBcnlbMl0gfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3dfSCA8IGJvb2tpbmdfSCkgewogICAgICAgICAgICAgICAgICAgIGlmIChub3dfTSA+PSBib29raW5nX00pIHsgcmV0dXJuIGNvbEFyeVsyXSB9IGVsc2UgaWYgKG5vd19NIDwgYm9va2luZ19NKSB7IHJldHVybiBjb2xBcnlbMl0gfQogICAgICAgICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGNvbEFyeVszXSB9CiAgICAgICAgICAgIH0gY2F0Y2ggeyByZXR1cm4gY29sQXJ5WzNdIH0KICAgICAgICB9LAogICAgICAgIHVwZGF0ZUN1cnJlbnRUaW1lKCkgeyB0aGlzLmNUID0gRGF0ZS5ub3coKTsgfSwKCiAgICAgICAgZ2V0RmlsZV9uYW1lKCkgewogICAgICAgICAgICBsZXQgTCA9ICfpnbbkvY3mlLbnm4rntIDpjIRfJzsKICAgICAgICAgICAgbGV0IGsgPSB0aGlzLmRheWpzKERhdGUubm93KCkpLmZvcm1hdCgiTU3mnIhEROaXpV9ISOm7nm1t5YiGIik7CiAgICAgICAgICAgIGxldCBKID0gJy5jc3YnOwogICAgICAgICAgICB0aGlzLmZpbGVOYW1lID0gTCArIGsgKyBKOwogICAgICAgIH0sCgoKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIC8vIGNvbnNvbGUubG9nKF90dXRvcmlhbHMudGl0bGUpOyAgCiAgICAgICAgU2VhdERhdGFTZXJ2aWNlLmdldEFsbCgpLm9uKCJ2YWx1ZSIsIHRoaXMub25EYXRhQ2hhbmdlKTsKICAgICAgICAvLyBQbXREYXRhU2VydmljZS5nZXRBbGwoKS5vbigidmFsdWUiLCB0aGlzLnBtdF9vbkRhdGFDaGFuZ2UpOwogICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnVwZGF0ZUN1cnJlbnRUaW1lLCAxMDAwKTsKICAgIH0sCiAgICBiZWZvcmVEZXN0cm95KCkgewogICAgICAgIFNlYXREYXRhU2VydmljZS5nZXRBbGwoKS5vZmYoInZhbHVlIiwgdGhpcy5vbkRhdGFDaGFuZ2UpOwogICAgfSwKCgp9Owo="},null]}