{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/bdadd7_List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/src/components/bdadd7_List.vue","mtime":1657434777639},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}